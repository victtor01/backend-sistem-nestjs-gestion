// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model users {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  email     String   @unique
  password  String
  status    Int      @default(1)
  type      Int
  photo     String
  birth     DateTime
  phone     String?  @unique
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  accounts      accounts[]
  workspaces    workspaces[]
  confirmation  codes_confirmation?
  clients_lists clients_lists[]
  services      services[]
}

model codes_confirmation {
  id     Int    @id @default(autoincrement())
  code   String @unique
  user   users  @relation(fields: [userId], references: [id])
  userId Int    @unique
}

model workspaces {
  id        Int      @id @default(autoincrement())
  name      String
  user      users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  columns columns_workspaces[]
}

model columns_workspaces {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  workspace   workspaces @relation(fields: [workspaceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  workspaceId Int
}

model accounts {
  id          Int         @id @default(autoincrement())
  name        String
  description String?
  registers   registers[]

  user   users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId Int
}

model registers {
  id    Int    @id @default(autoincrement())
  name  String
  value Float
  type  Int    @default(1)

  account   accounts @relation(fields: [accountId], references: [id])
  accountId Int
}

model clients_lists {
  id      Int       @id @default(autoincrement())
  name    String
  color   String?
  userId  Int
  clients clients[]

  user users @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model clients {
  id     Int       @id @default(autoincrement())
  name   String
  listId Int
  cpf    String
  phone  String?
  email  String?
  birth  DateTime?
  photo  String?

  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  //clients_services clients_services[]
  services services[]
  address          clients_address[]
  list             clients_lists      @relation(fields: [listId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model clients_address {
  id           Int     @id @default(autoincrement())
  clientId     Int
  street       String
  cep          String
  neighborhood String
  number       String
  client       clients @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

//model clients_services {
  //id        Int @id @default(autoincrement())
  //clientId  Int
  //serviceId Int

  //clients  clients  @relation(fields: [clientId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  //services services @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  //@@id([clientId, serviceId])
//}

model services {
  id        Int      @id @default(autoincrement())
  name      String
  type      String
  price     Float    @default(0)
  quantity  Int?
  discount  Float?
  userId    Int
  createdAt DateTime @default(now())
  updateAt  DateTime @default(now())

  clients clients[]
  //clients_services clients_services[]
  user             users              @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}
